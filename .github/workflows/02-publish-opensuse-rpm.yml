# Nome del workflow, specifico per openSUSE
name: 02. Build and Publish openSUSE RPM

# Controllo per evitare conflitti di scrittura su gh-pages
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # --- JOB 1: COSTRUISCE IL PACCHETTO PER openSUSE ---
  build-opensuse:
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 2. Get Package Version
        id: version
        run: echo "version=$(grep -m 1 '^Version:' packaging/rpm/penguins-eggs.spec | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: 3. Install Build Dependencies
        run: |
          zypper --non-interactive install rpm-build git tar gzip curl gpg2
          zypper modifyrepo --enable repo-source
          zypper --non-interactive refresh
          for package in $(grep '^BuildRequires:' packaging/rpm/penguins-eggs.spec | awk '{print $2}'); do
            zypper --non-interactive install "$package"
          done

      - name: 4. Import GPG Key and Configure RPM
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch
          echo '%_signature gpg' > ~/.rpmmacros
          echo '%_gpg_name ${{ secrets.GPG_KEY_ID }}' >> ~/.rpmmacros

      - name: 5. Prepare RPM Sources
        run: |
          # Usiamo 'git archive' in due passaggi per la massima affidabilita'.
          # Prima creiamo il .tar, poi lo comprimiamo con gzip.
          mkdir -p $HOME/rpmbuild/SOURCES
          git archive --format=tar --prefix="penguins-eggs-${{ steps.version.outputs.version }}/" -o $HOME/rpmbuild/SOURCES/penguins-eggs.tar HEAD
          gzip $HOME/rpmbuild/SOURCES/penguins-eggs.tar

          # Gestiamo i bootloaders come prima
          curl -LO https://github.com/pieroproietti/penguins-bootloaders/releases/download/v25.9.8/bootloaders.tar.gz
          cp bootloaders.tar.gz $HOME/rpmbuild/SOURCES/

      - name: 6. Build and Sign RPM package
        id: build
        run: |
          echo '%_topdir %(echo $HOME)/rpmbuild' >> ~/.rpmmacros
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 -o /dev/null -s /dev/null
          rpmbuild -ba packaging/rpm/penguins-eggs.spec
          rpmsign --addsign $(find $HOME/rpmbuild/RPMS -name '*.rpm')
          echo "rpm_path=$(find $HOME/rpmbuild/RPMS -name '*.rpm')" >> $GITHUB_OUTPUT

      - name: 7. Upload RPM Artifact for publishing
        uses: actions/upload-artifact@v4
        with:
          name: opensuse-tumbleweed-rpm-for-repo
          path: ${{ steps.build.outputs.rpm_path }}

  # --- JOB 2: PUBBLICA SUL REPOSITORY (DOPO IL BUILD) ---
  publish-repo:
    needs: build-opensuse
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 1. Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          
      - name: 2. Create directory structure
        run: mkdir -p rpm/opensuse/tumbleweed

      - name: 3. Download openSUSE RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: opensuse-tumbleweed-rpm-for-repo
          path: ./rpm/opensuse/tumbleweed

      - name: 4. Install Tools and Import GPG Key
        run: |
          sudo apt-get update && sudo apt-get install -y createrepo-c gnupg2
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch

      - name: 5. Update and Sign Repository for openSUSE
        run: |
          find ./rpm/opensuse/tumbleweed -name "*.rpm" -exec mv -t ./rpm/opensuse/tumbleweed/ {} +
          cd ./rpm/opensuse/tumbleweed
          createrepo_c .
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --detach-sign --armor -u ${{ secrets.GPG_KEY_ID }} repodata/repomd.xml

      - name: 6. Commit and Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

