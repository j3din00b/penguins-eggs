# Nome del workflow, specifico per Arch Linux
name: 04. Build and Publish Arch Linux Repository

# Controllo per evitare conflitti di scrittura su gh-pages
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  BOOTLOADERS_VERSION: v25.9.8

jobs:
  # --- JOB 1: COSTRUISCE IL PACCHETTO PER ARCH LINUX ---
  build-arch:
    runs-on: ubuntu-latest
    container:
      image: archlinux
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 2. Prepare Build Environment and Dependencies
        run: |
          pacman -Syu --noconfirm
          # Aggiungiamo gnupg per la firma e jq per leggere package.json
          pacman -S --noconfirm base-devel git pnpm gnupg jq

      - name: 3. Create Build User and Set Permissions
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown -R builder:builder "$GITHUB_WORKSPACE"

      - name: 4. Get Package Version from package.json
        id: version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }}

      - name: 5. Update Version in PKGBUILD File
        run: |
          echo "Updating PKGBUILD file to version ${{ steps.version.outputs.version }}"
          sed -i "s/^\(pkgver=\).*/\1${{ steps.version.outputs.version }}/" PKGBUILD
        working-directory: ./packaging/arch

      - name: 6. Import GPG Key
        # La sintassi qui e' stata corretta. 'shell' e 'stdin' sono
        # proprieta' dello step, allo stesso livello di 'name' e 'run'.
        name: Import GPG Key
        run: sudo -u builder gpg --import -
        shell: bash
        stdin: ${{ secrets.GPG_SIGNING_KEY }}

      - name: 7. Build and Sign The Package as Non-Root User
        id: build
        # Anche qui, 'working-directory' e' stato spostato al livello corretto.
        working-directory: ./packaging/arch
        run: |
          # Passiamo la passphrase a makepkg in modo non interattivo
          sudo -u builder makepkg -s --sign --key ${{ secrets.GPG_KEY_ID }} --noconfirm --passphrase-file <(echo "${{ secrets.GPG_PASSPHRASE }}")
          echo "pkg_path=$(find . -name '*.pkg.tar.zst')" >> $GITHUB_OUTPUT
        
      - name: 8. Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: archlinux-package-for-repo
          path: ./packaging/arch/*.pkg.tar.zst

  # --- JOB 2: PUBBLICA SUL REPOSITORY (DOPO IL BUILD) ---
  publish-repo:
    needs: build-arch
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: archlinux
    steps:
      - name: 1. Install Prerequisite Tools
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm git pacman-contrib gnupg

      - name: 2. Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          
      - name: 3. Create directory structure
        run: mkdir -p arch/x86_64

      - name: 4. Download Arch package artifact
        uses: actions/download-artifact@v4
        with:
          name: archlinux-package-for-repo
          path: ./arch/x86_64

      - name: 5. Update and Sign Arch Repository
        run: |
          cd ./arch/x86_64
          REPO_NAME="penguins-eggs"
          
          # Spostiamo il pacchetto dalla sottocartella creata da download-artifact
          find . -name "*.pkg.tar.zst" -exec mv -t . {} +

          # Aggiungiamo il nuovo pacchetto al database del repository
          repo-add ${REPO_NAME}.db.tar.gz *.pkg.tar.zst
          
          # Firmiamo il database del repository
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor -u ${{ secrets.GPG_KEY_ID }} ${REPO_NAME}.db.tar.gz

      - name: 6. Commit and Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          # Usiamo un PAT perche' il container Arch non ha un ambiente git pre-configurato
          personal_token: ${{ secrets.GH_PAT }}
          publish_dir: .
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

