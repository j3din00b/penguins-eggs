# ==============================================================================
# WORKFLOW PER LA COSTRUZIONE E PUBBLICAZIONE DEL REPOSITORY ARCH LINUX
#
# Strategia:
# 1. JOB 'build': Costruisce il pacchetto in un ambiente Arch pulito,
#    legge la versione da package.json, aggiorna il PKGBUILD,
#    firma il pacchetto e lo carica come artefatto.
# 2. JOB 'publish': Parte dopo il successo del build. Prepara un
#    repository Arch, aggiunge il nuovo pacchetto, aggiorna e firma
#    l'indice del repository, e lo pubblica su GitHub Pages.
# ==============================================================================
name: 04. Build and Publish Arch Linux Repository

# Evita che piÃ¹ esecuzioni si sovrappongano scrivendo sul branch gh-pages
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  # Definiamo la versione dei bootloaders in un unico posto
  BOOTLOADERS_VERSION: v25.9.8

jobs:
  # --- JOB 1: COSTRUISCE IL PACCHETTO .pkg.tar.zst ---
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 2. Prepare Build Environment
        run: |
          # Aggiorna il sistema e installa gli strumenti essenziali
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git pnpm gnupg jq

      - name: 3. Create Build User
        run: |
          # makepkg richiede di essere eseguito da un utente non-root
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown -R builder:builder "$GITHUB_WORKSPACE"

      - name: 4. Get Version from package.json
        id: version
        working-directory: ${{ github.workspace }}
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: 5. Update PKGBUILD
        working-directory: ./packaging/arch
        run: |
          # Aggiorna dinamicamente la versione nel file PKGBUILD
          echo "Updating PKGBUILD to version ${{ steps.version.outputs.version }}"
          sed -i "s/^\(pkgver=\).*/\1${{ steps.version.outputs.version }}/" PKGBUILD

      - name: 6. Import GPG Key
        # Importa la chiave GPG come utente 'builder'
        run: sudo -u builder gpg --import -
        shell: bash
        stdin: ${{ secrets.GPG_SIGNING_KEY }}

      - name: 7. Build and Sign Package
        id: build_pkg
        working-directory: ./packaging/arch
        shell: bash # Obbligatorio per usare <(...)
        run: |
          # Eseguiamo makepkg come 'builder'
          # -s: Installa le dipendenze mancanti
          # --sign: Firma il pacchetto dopo la creazione
          # --key: Specifica quale chiave usare
          # --noconfirm: Non fare domande
          # --passphrase-file: Passa la passphrase in modo non interattivo
          sudo -u builder makepkg -s --sign --key ${{ secrets.GPG_KEY_ID }} --noconfirm --passphrase-file <(echo "${{ secrets.GPG_PASSPHRASE }}")
          
          # Salva il percorso del pacchetto creato per lo step successivo
          echo "pkg_path=$(find . -name '*.pkg.tar.zst')" >> $GITHUB_OUTPUT
        
      - name: 8. Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: archlinux-package-for-repo
          # Il percorso deve essere relativo al workspace, non allo step
          path: ./packaging/arch/*.pkg.tar.zst

  # --- JOB 2: PUBBLICA IL REPOSITORY SU GITHUB PAGES ---
  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: archlinux
    steps:
      - name: 1. Install Tools
        run: |
          pacman -Syu --noconfirm
          # 'repo-add' si trova in 'pacman-contrib'
          pacman -S --noconfirm git pacman-contrib gnupg

      - name: 2. Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          
      - name: 3. Prepare Repository Structure
        run: mkdir -p arch/x86_64

      - name: 4. Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: archlinux-package-for-repo
          path: ./arch/x86_64

      - name: 5. Update and Sign Repository
        run: |
          cd ./arch/x86_64
          REPO_NAME="penguins-eggs"
          
          # Aggiunge il pacchetto al database e firma il database stesso
          # Inneschiamo prima l'agente GPG per la firma non interattiva
          echo "Updating repository database..."
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 -o /dev/null -s /dev/null

          # Ora repo-add potra' usare la chiave sbloccata per firmare
          repo-add --sign --key ${{ secrets.GPG_KEY_ID }} ${REPO_NAME}.db.tar.gz *.pkg.tar.zst

      - name: 6. Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          # Usiamo un PAT per garantire i permessi di scrittura
          personal_token: ${{ secrets.GH_PAT }}
          publish_dir: .
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

