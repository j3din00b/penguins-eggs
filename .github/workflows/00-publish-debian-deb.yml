# Nome del workflow, specifico per Debian e derivate
name: 00. Build and Publish Debian Repository

# Controllo per evitare conflitti di scrittura su gh-pages
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # --- JOB 1: COSTRUISCE I PACCHETTI .deb PER TUTTE LE ARCHITETTURE ---
  build-deb:
    runs-on: ubuntu-latest
    container:
      image: debian:12
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Install Dependencies and Enable Multi-Arch
        run: |
          # Aggiungiamo il supporto per le architetture i386 e arm64
          dpkg --add-architecture i386
          dpkg --add-architecture arm64
          apt-get update
          
          # Installiamo gli strumenti di base
          apt-get install -y curl gpg git build-essential dpkg-dev fakeroot gnupg2 apt-utils xz-utils
          
          # Aggiungiamo il repository di Node.js
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
          
          apt-get update
          apt-get install -y nodejs
          npm install -g pnpm

      - name: 3. Import GPG Key and Prime Agent
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GGPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 -o /dev/null -s /dev/null

      - name: 4. Build .deb packages (all architectures)
        run: |
          export GPG_TTY=$(tty)
          pnpm install
          # Usiamo il flag corretto per il build multi-architettura
          pnpm deb -a

      - name: 5. Upload .deb Artifact for publishing
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages-for-repo
          path: dist/*.deb

  # --- JOB 2: PUBBLICA SUL REPOSITORY (DOPO IL BUILD) ---
  publish-repo:
    needs: build-deb
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 1. Create directory structure
        run: |
          # Creiamo la struttura completa, inclusa la nuova architettura
          mkdir -p repo-to-publish/deb/dists/stable/main/binary-amd64
          mkdir -p repo-to-publish/deb/dists/stable/main/binary-i386
          mkdir -p repo-to-publish/deb/dists/stable/main/binary-arm64
          mkdir -p repo-to-publish/deb/pool/main

      - name: 2. Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deb-packages-for-repo
          path: repo-to-publish/deb/pool/main

      - name: 3. Install Tools and Import GPG Key
        run: |
          sudo apt-get update && sudo apt-get install -y dpkg-dev gnupg2 apt-utils xz-utils
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch

      - name: 4. Update and Sign APT Repository
        run: |
          export GPG_TTY=$(tty)
          cd ./repo-to-publish/deb
          
          # Il comando 'find' e' stato rimosso perche' non necessario
          
          # Creiamo l'indice Packages in tutti i formati
          dpkg-scanpackages pool/ > dists/stable/main/Packages
          gzip -9c dists/stable/main/Packages > dists/stable/main/Packages.gz
          xz -9c dists/stable/main/Packages > dists/stable/main/Packages.xz
          
          # Copiamo gli indici per ogni architettura
          cp dists/stable/main/Packages* dists/stable/main/binary-amd64/
          cp dists/stable/main/Packages* dists/stable/main/binary-i386/
          cp dists/stable/main/Packages* dists/stable/main/binary-arm64/
          
          # Usiamo apt-ftparchive per creare un file Release corretto e completo
          apt-ftparchive release dists/stable > dists/stable/Release
          
          # Firmiamo il file Release
          cd dists/stable
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --clearsign -o InRelease Release
          
      - name: 5. Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo-to-publish
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

