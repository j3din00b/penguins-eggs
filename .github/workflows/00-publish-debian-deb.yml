# Nome del workflow, specifico per Debian e derivate
name: 00. Build and Publish Debian Repository

# Controllo per evitare conflitti di scrittura su gh-pages
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # --- JOB 1: COSTRUISCE IL PACCHETTO .deb ---
  build-deb:
    runs-on: ubuntu-latest
    container:
      image: debian:12
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Install Dependencies with Specific Node.js Version
        run: |
          apt-get update
          apt-get install -y curl gpg git build-essential dpkg-dev fakeroot gnupg2 apt-utils xz-utils
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
          apt-get update
          apt-get install -y nodejs
          npm install -g pnpm

      - name: 3. Import GPG Key and Prime Agent
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 -o /dev/null -s /dev/null

      - name: 4. Build .deb package (amd64 only)
        run: |
          export GPG_TTY=$(tty)
          pnpm install
          pnpm deb

      - name: 5. Upload .deb Artifact for publishing
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages-for-repo
          path: dist/*.deb

  # --- JOB 2: PUBBLICA SUL REPOSITORY (DOPO IL BUILD) ---
  publish-repo:
    needs: build-deb
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 1. Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      
      - name: 2. Create directory structure
        run: mkdir -p deb/

      - name: 3. Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deb-packages-for-repo
          path: deb/

      - name: 4. Install Tools and Import GPG Key
        run: |
          sudo apt-get update && sudo apt-get install -y dpkg-dev gnupg2
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch

      - name: 5. Update and Sign Simple APT Repository
        run: |
          export GPG_TTY=$(tty)
          cd ./deb

          # SOLUZIONE: Spostiamo i file .deb dalle sottocartelle al livello corretto
          find . -name "*.deb" -exec mv -t . {} +
          
          # Creiamo l'indice nella cartella corrente
          dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
          
          # Calcoliamo tutti i metadati necessari per un file Release robusto
          MD5=$(md5sum Packages.gz | awk '{print $1}')
          SHA1=$(sha1sum Packages.gz | awk '{print $1}')
          SHA256=$(sha256sum Packages.gz | awk '{print $1}')
          FILESIZE=$(stat -c %s Packages.gz)

          # Creiamo il file Release completo
          RELEASE_FILE="Release"
          echo "Origin: Piero Proietti" > $RELEASE_FILE
          echo "Label: penguins-eggs" >> $RELEASE_FILE
          echo "Architectures: amd64" >> $RELEASE_FILE
          echo "Description: penguins-eggs Debian/Ubuntu repository" >> $RELEASE_FILE
          echo "Date: $(date -Ru)" >> $RELEASE_FILE
          echo "MD5Sum:" >> $RELEASE_FILE
          printf ' %s %d %s\n' "$MD5" "$FILESIZE" "Packages.gz" >> $RELEASE_FILE
          echo "SHA1:" >> $RELEASE_FILE
          printf ' %s %d %s\n' "$SHA1" "$FILESIZE" "Packages.gz" >> $RELEASE_FILE
          echo "SHA256:" >> $RELEASE_FILE
          printf ' %s %d %s\n' "$SHA256" "$FILESIZE" "Packages.gz" >> $RELEASE_FILE
          
          # Firmiamo il file Release
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --clearsign -o InRelease $RELEASE_FILE
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback -abs -o Release.gpg $RELEASE_FILE
          
      - name: 6. Commit and Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

